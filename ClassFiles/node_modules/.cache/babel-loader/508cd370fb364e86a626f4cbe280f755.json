{"ast":null,"code":"var _jsxFileName = \"d:\\\\CoursewareDevelopment\\\\ReactFundamentals\\\\Demos\\\\Lesson09\\\\react-fundamentals\\\\src\\\\formBuilder.js\";\nimport React from 'react';\nimport Input from './components/Forms/Input';\nvar formBuilder = {\n  configInput: function configInput(kind, type, label, placeholder, validation) {\n    var value = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';\n    var settings = {\n      kind: kind,\n      label: label,\n      value: value,\n      attrs: {}\n    };\n\n    if (typeof type !== 'undefined') {\n      settings.attrs.type = type;\n    }\n\n    if (placeholder !== null && typeof placeholder !== 'undefined') {\n      settings.attrs.placeholder = placeholder;\n    } else {\n      settings.attrs.placeholder = 'enter ' + label.toLowerCase();\n    }\n\n    return settings;\n  },\n  buildForm: function buildForm(settings, handler) {\n    var elements = [];\n\n    for (var key in settings) {\n      elements.push({\n        id: key,\n        config: settings[key]\n      });\n    }\n\n    var content = elements.map(function (elem) {\n      return React.createElement(Input, {\n        key: elem.id,\n        label: elem.config.label,\n        kind: elem.config.kind,\n        value: elem.config.value,\n        attrs: elem.config.attrs,\n        changed: function changed(event) {\n          return handler(event, elem.id);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      });\n    });\n    return content;\n  },\n  checkValidity: function checkValidity(value, rules) {\n    var retVal = {\n      valid: true\n    };\n\n    if (rules.required) {\n      if (value.trim() === '') {}\n    }\n  }\n};\nexport default formBuilder;","map":{"version":3,"sources":["d:\\CoursewareDevelopment\\ReactFundamentals\\Demos\\Lesson09\\react-fundamentals\\src\\formBuilder.js"],"names":["React","Input","formBuilder","configInput","kind","type","label","placeholder","validation","value","settings","attrs","toLowerCase","buildForm","handler","elements","key","push","id","config","content","map","elem","event","checkValidity","rules","retVal","valid","required","trim"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AAEA,IAAMC,WAAW,GAAG;AACnBC,EAAAA,WADmB,uBACPC,IADO,EACDC,IADC,EACKC,KADL,EACYC,WADZ,EACyBC,UADzB,EAC+C;AAAA,QAAVC,KAAU,uEAAJ,EAAI;AACjE,QAAMC,QAAQ,GAAG;AAChBN,MAAAA,IAAI,EAAJA,IADgB;AAEhBE,MAAAA,KAAK,EAALA,KAFgB;AAGhBG,MAAAA,KAAK,EAALA,KAHgB;AAIhBE,MAAAA,KAAK,EAAE;AAJS,KAAjB;;AAOA,QAAI,OAAON,IAAP,KAAgB,WAApB,EAAiC;AAChCK,MAAAA,QAAQ,CAACC,KAAT,CAAeN,IAAf,GAAsBA,IAAtB;AACA;;AACD,QAAIE,WAAW,KAAK,IAAhB,IAAwB,OAAOA,WAAP,KAAuB,WAAnD,EAAgE;AAC/DG,MAAAA,QAAQ,CAACC,KAAT,CAAeJ,WAAf,GAA6BA,WAA7B;AACA,KAFD,MAEO;AACNG,MAAAA,QAAQ,CAACC,KAAT,CAAeJ,WAAf,GAA6B,WAAWD,KAAK,CAACM,WAAN,EAAxC;AACA;;AAED,WAAOF,QAAP;AACA,GAnBkB;AAqBnBG,EAAAA,SArBmB,qBAqBTH,QArBS,EAqBCI,OArBD,EAqBU;AAC5B,QAAMC,QAAQ,GAAG,EAAjB;;AACA,SAAK,IAAIC,GAAT,IAAgBN,QAAhB,EAA0B;AACzBK,MAAAA,QAAQ,CAACE,IAAT,CAAc;AACbC,QAAAA,EAAE,EAAEF,GADS;AAEbG,QAAAA,MAAM,EAAET,QAAQ,CAACM,GAAD;AAFH,OAAd;AAIA;;AAED,QAAMI,OAAO,GAAGL,QAAQ,CAACM,GAAT,CAAa,UAAAC,IAAI;AAAA,aAChC,oBAAC,KAAD;AAAO,QAAA,GAAG,EAAEA,IAAI,CAACJ,EAAjB;AACC,QAAA,KAAK,EAAEI,IAAI,CAACH,MAAL,CAAYb,KADpB;AAEC,QAAA,IAAI,EAAEgB,IAAI,CAACH,MAAL,CAAYf,IAFnB;AAGC,QAAA,KAAK,EAAEkB,IAAI,CAACH,MAAL,CAAYV,KAHpB;AAIC,QAAA,KAAK,EAAIa,IAAI,CAACH,MAAL,CAAYR,KAJtB;AAKC,QAAA,OAAO,EAAE,iBAACY,KAAD;AAAA,iBAAWT,OAAO,CAACS,KAAD,EAAQD,IAAI,CAACJ,EAAb,CAAlB;AAAA,SALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADgC;AAAA,KAAjB,CAAhB;AAUA,WAAOE,OAAP;AACA,GAzCkB;AA2CnBI,EAAAA,aA3CmB,yBA2CLf,KA3CK,EA2CEgB,KA3CF,EA2CS;AAC3B,QAAMC,MAAM,GAAG;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAf;;AAEA,QAAIF,KAAK,CAACG,QAAV,EAAoB;AACnB,UAAInB,KAAK,CAACoB,IAAN,OAAiB,EAArB,EAAyB,CAExB;AACD;AACD;AAnDkB,CAApB;AAuDA,eAAe3B,WAAf","sourcesContent":["import React from 'react';\r\nimport Input from './components/Forms/Input';\r\n\r\nconst formBuilder = {\r\n\tconfigInput(kind, type, label, placeholder, validation, value='') {\r\n\t\tconst settings = {\r\n\t\t\tkind,\r\n\t\t\tlabel,\r\n\t\t\tvalue,\r\n\t\t\tattrs: {}\r\n\t\t}\r\n\t\t\r\n\t\tif (typeof type !== 'undefined') {\r\n\t\t\tsettings.attrs.type = type;\r\n\t\t}\r\n\t\tif (placeholder !== null && typeof placeholder !== 'undefined') {\r\n\t\t\tsettings.attrs.placeholder = placeholder;\r\n\t\t} else {\r\n\t\t\tsettings.attrs.placeholder = 'enter ' + label.toLowerCase();\r\n\t\t}\r\n\r\n\t\treturn settings;\r\n\t},\r\n\r\n\tbuildForm(settings, handler) {\r\n\t\tconst elements = [];\r\n\t\tfor (let key in settings) {\r\n\t\t\telements.push({\r\n\t\t\t\tid: key,\r\n\t\t\t\tconfig: settings[key]\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tconst content = elements.map(elem => (\r\n\t\t\t<Input key={elem.id}\r\n\t\t\t\tlabel={elem.config.label}\r\n\t\t\t\tkind={elem.config.kind}\r\n\t\t\t\tvalue={elem.config.value}\r\n\t\t\t\tattrs = {elem.config.attrs}\r\n\t\t\t\tchanged={(event) => handler(event, elem.id)}\r\n\t\t\t\t />\r\n\t\t));\r\n\r\n\t\treturn content;\r\n\t},\r\n\r\n\tcheckValidity(value, rules) {\r\n\t\tconst retVal = { valid: true };\r\n\r\n\t\tif (rules.required) {\r\n\t\t\tif (value.trim() === '') {\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n};\r\n\r\nexport default formBuilder;\r\n"]},"metadata":{},"sourceType":"module"}