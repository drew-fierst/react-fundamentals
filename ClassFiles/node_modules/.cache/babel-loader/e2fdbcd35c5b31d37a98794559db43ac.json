{"ast":null,"code":"var _jsxFileName = \"d:\\\\CoursewareDevelopment\\\\ReactFundamentals\\\\Demos\\\\Lesson09\\\\react-fundamentals\\\\src\\\\formBuilder.js\";\nimport React from 'react';\nimport Input from './components/Forms/Input';\nvar formBuilder = {\n  configInput: function configInput(kind, type, label, placeholder) {\n    var validation = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    var value = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';\n    var settings = {\n      kind: kind,\n      label: label,\n      value: value,\n      validation: validation,\n      attrs: {}\n    };\n\n    if (typeof type !== 'undefined') {\n      settings.attrs.type = type;\n    }\n\n    if (placeholder !== null && typeof placeholder !== 'undefined') {\n      settings.attrs.placeholder = placeholder;\n    } else {\n      settings.attrs.placeholder = 'enter ' + label.toLowerCase();\n    }\n\n    return settings;\n  },\n  buildForm: function buildForm(settings, handler) {\n    var elements = [];\n\n    for (var key in settings) {\n      elements.push({\n        id: key,\n        config: settings[key]\n      });\n    }\n\n    var content = elements.map(function (elem) {\n      return React.createElement(Input, {\n        key: elem.id,\n        label: elem.config.label,\n        kind: elem.config.kind,\n        value: elem.config.value,\n        attrs: elem.config.attrs,\n        valid: elem.config.valid,\n        changed: function changed(event) {\n          return handler(event, elem.id);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      });\n    });\n    return content;\n  },\n  checkValidity: function checkValidity(inputConfig) {\n    inputConfig.valid = true;\n    var errors = [];\n\n    if (inputConfig.validation.required) {\n      if (inputConfig.value.trim() === '') {\n        inputConfig.valid = false; // errors.push(`You must enter a value for ${inputConfig.label}`);\n      }\n    }\n\n    if (inputConfig.validation.minLength) {\n      if (inputConfig.value.trim().length < inputConfig.validation.minLength) {\n        inputConfig.valid = false; // errors.push(`${inputConfig.label} must be at least ${inputConfig.validation.minLength} characters`);\n      }\n    } // inputConfig.errors = errors;\n\n  }\n};\nexport default formBuilder;","map":{"version":3,"sources":["d:\\CoursewareDevelopment\\ReactFundamentals\\Demos\\Lesson09\\react-fundamentals\\src\\formBuilder.js"],"names":["React","Input","formBuilder","configInput","kind","type","label","placeholder","validation","value","settings","attrs","toLowerCase","buildForm","handler","elements","key","push","id","config","content","map","elem","valid","event","checkValidity","inputConfig","errors","required","trim","minLength","length"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Input from './components/Forms/Input';\r\n\r\nconst formBuilder = {\r\n\tconfigInput(kind, type, label, placeholder, validation={}, value='') {\r\n\t\tconst settings = {\r\n\t\t\tkind,\r\n\t\t\tlabel,\r\n\t\t\tvalue,\r\n\t\t\tvalidation,\r\n\t\t\tattrs: {}\r\n\t\t}\r\n\t\t\r\n\t\tif (typeof type !== 'undefined') {\r\n\t\t\tsettings.attrs.type = type;\r\n\t\t}\r\n\t\tif (placeholder !== null && typeof placeholder !== 'undefined') {\r\n\t\t\tsettings.attrs.placeholder = placeholder;\r\n\t\t} else {\r\n\t\t\tsettings.attrs.placeholder = 'enter ' + label.toLowerCase();\r\n\t\t}\r\n\r\n\t\treturn settings;\r\n\t},\r\n\r\n\tbuildForm(settings, handler) {\r\n\t\tconst elements = [];\r\n\t\tfor (let key in settings) {\r\n\t\t\telements.push({\r\n\t\t\t\tid: key,\r\n\t\t\t\tconfig: settings[key]\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tconst content = elements.map(elem => (\r\n\t\t\t<Input key={elem.id}\r\n\t\t\t\tlabel={elem.config.label}\r\n\t\t\t\tkind={elem.config.kind}\r\n\t\t\t\tvalue={elem.config.value}\r\n\t\t\t\tattrs = {elem.config.attrs}\r\n\t\t\t\tvalid = {elem.config.valid}\r\n\t\t\t\tchanged={(event) => handler(event, elem.id)}\r\n\t\t\t\t />\r\n\t\t));\r\n\r\n\t\treturn content;\r\n\t},\r\n\r\n\tcheckValidity(inputConfig) {\r\n\t\tinputConfig.valid = true;\r\n\t\tconst errors = [];\r\n\r\n\t\tif (inputConfig.validation.required) {\r\n\t\t\tif (inputConfig.value.trim() === '') {\r\n\t\t\t\tinputConfig.valid = false;\r\n\t\t\t\t// errors.push(`You must enter a value for ${inputConfig.label}`);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (inputConfig.validation.minLength) {\r\n\t\t\tif (inputConfig.value.trim().length < inputConfig.validation.minLength) {\r\n\t\t\t\tinputConfig.valid = false;\r\n\t\t\t\t// errors.push(`${inputConfig.label} must be at least ${inputConfig.validation.minLength} characters`);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// inputConfig.errors = errors;\r\n\t}\r\n\r\n};\r\n\r\nexport default formBuilder;\r\n"]},"metadata":{},"sourceType":"module"}